@page "/MemberAcceptanceManagement"
@using CampTiger.Models
@using CampTiger.Data
@using Microsoft.AspNetCore.Identity

@attribute [Authorize(Roles = "admin, groupleader")]

@inject IJSRuntime JsRuntime
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EventService eventService
@inject AspNetUsersService aspNetUsersService
@inject UserEventService userEventService
@inject GroupService  groupService
@inject UserGroupService  userGroupService
<h1>Member Acceptance Management</h1>
<p>Remove member acceptance in events.</p>
<input type="text" id="searchKey" @onkeyup="@LookUp" placeholder="Search for events by name..." title="Type in a name">
<br />
@if (events == null)
{
    <p><em> Loading...</em></p>
}

else
{
    <table class='table table-hover' id="list">
        <thead>
            <tr>
                <th>Name</th>
                <th>Leader</th>
                <th>Description</th>
                <th>Date</th>
                <th>Time</th>
                <th>Capacity</th>
                <th>Group</th>
            </tr>
        </thead>
        <tbody>
            <AuthorizeView Roles="groupleader">
                @foreach (var item in events)
                {
                    @foreach (var sect in groups)
                    {
                        @foreach (var user in users)
                        {
                            @if (item.Leader == userId & sect.Leader == userId && user.Id == userId)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@user.FirstName  @user.LastName</td>
                                    <td>@item.Description</td>
                                    <td>@item.Date</td>
                                    <td>@item.Time</td>
                                    <td>@item.Capacity</td>
                                    <td>@sect.Name</td>
                                </tr>
                            }
                            else
                            {
                                if (item.Leader == null)
                                {
                                    <tr @onclick="@(() => Show(item.EventId))">
                                        <td>@item.Name</td>
                                        <td>No current leader</td>
                                        <td>@item.Description</td>
                                        <td>@item.Date</td>
                                        <td>@item.Time</td>
                                        <td>@item.Capacity</td>
                                        @if (item.Group == sect.GroupId)
                                        {
                                            <td>@sect.Name</td>
                                            continue;
                                        }
                                        @if (item.Group != null & groupService.GetGroupByIdAsync(item.Group) == null)
                                        {
                                            <td>@item.Group</td>
                                        }

                                    </tr>
                                }
                            }
                        }
                    }
                    if (item.Leader == userId)
                    {
                        <tr>Users attending @item.Name on @item.Date</tr>
                    }
                    @foreach (var user in users)
                    {
                        <tr>
                            @foreach (var record in records)
                            {
                                if (record.EventId == item.EventId & record.UserId == user.Id && item.Leader == userId)
                                {
                                    <td>@user.FirstName @user.LastName</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="(() => DenyRequest(user, item))">Remove</button>
                                    </td>
                                }
                            }
                        </tr>
                    }
                    if (item.Leader == userId)
                    {
                        <tr><td>&nbsp;</td></tr>
                    }
                }
            </AuthorizeView>
            <AuthorizeView Roles="admin">
                @foreach (var item in events)
                {
                    @foreach (var user in users)
                    {
                        @if (user.Id == item.Leader)
                        {
                            <tr @onclick="@(() => Show(item.EventId))">
                                <td>@item.Name</td>
                                <td>@user.FirstName  @user.LastName</td>
                                <td>@item.Description</td>
                                <td>@item.Date</td>
                                <td>@item.Time</td>
                                <td>@item.Capacity</td>
                                @foreach (var sect in groups)
                                {
                                    @if (item.Group == sect.GroupId)
                                    {
                                        <td>@sect.Name</td>
                                    }
                                }
                                <input type="hidden" plachehold="EventID" @bind="@item.EventId" />;
                            </tr>
                        }
                    }
                    <tr>Users attending @item.Name on @item.Date</tr>
                    @foreach (var user in users)
                    {
                        <tr>
                            @foreach (var record in records)
                            {
                                if (record.EventId == item.EventId & record.UserId == user.Id)
                                {
                                    <td>@user.FirstName @user.LastName</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="(() => DenyRequest(user, item))">Remove</button>
                                    </td>
                                }
                            }
                        </tr>
                    }
                    <tr><td>&nbsp;</td></tr>
                }
            </AuthorizeView>
        </tbody>
    </table>

}

@functions{
    List<Event> events;
    List<AspNetUsers> users;
    List<Group> groups;
    List<UserEvent> records;
    List<UserGroups> groupmembers;
    AspNetUsers currUser;
    String userId;
    string eventId;
    string leader;
    string Group;
    string name;
    string description;
    string date;
    string time;
    string capacity;
    Event activity;


    protected void ClearFields()
    {
        eventId = string.Empty;
        Group = string.Empty;
        name = string.Empty;
        description = string.Empty;
        date = string.Empty;
        time = string.Empty;
        capacity = string.Empty;
    }

    protected async Task Update()
    {
        Event ev = new Event()
        {
            EventId = eventId,
            Leader = leader,
            Group = Group,
            Name = name,
            Description = description,
            Date = date,
            Time = time,
            Capacity = capacity
        };

        await eventService.UpdateEventAsynC(eventId, ev);
        ClearFields();
        await load();
    }

    protected async Task Delete()
    {
        await eventService.DeleteEventAsync(eventId);
        ClearFields();
        await load();
    }

    protected async Task Show(string id)
    {
        activity = await eventService.GetEventByIdAsync(id);
        eventId = activity.EventId;
        Group = activity.Group;
        leader = activity.Leader;
        name = activity.Name;
        description = activity.Description;
        date = activity.Date;
        time = activity.Time;
        capacity = activity.Capacity;
    }

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        events = await eventService.GetEventsAsync();
        users = await aspNetUsersService.GetAspNetUsersAsync();
        groups = await groupService.GetGroupAsync();
        records = await userEventService.GetUserEventAsync();
        groupmembers = await userGroupService.GetUserGroupAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = await UserManager.GetUserAsync(user);
        userId = currentUser.Id;
    }

    async Task LookUp()
    {
        await JsRuntime.InvokeVoidAsync("mySearch");
    }
    protected async Task DenyRequest(AspNetUsers user, Event activity)
    {
        await userEventService.DeleteUserEventAsync(activity.EventId, user.Id);
        await load();
    }
}
