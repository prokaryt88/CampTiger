@page "/MyFamily"
@using CampTiger.Models
@using CampTiger.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@attribute [Authorize(Roles = "normal")]

@inject IJSRuntime JsRuntime
@inject UserManager<IdentityUser> _UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AspNetUsersService userService
@inject FamilyService familyService

<h3>My Family</h3>

<p>Your Family Member's Accounts</p>

@if (Users == null)
{
    <p><em> Loading...</em></p>
}
else
{
    @if (familyId == null)
    {
        <p>You Are not in a Family</p>
        <a href="FamilySignUp" class="btn btn-info" role="button">Join A Family</a>
        <br />
    }
    else
    {
        <table class='table table-hover' id="list">
            <thead>
                <tr>
                    <th>EMail</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Address</th>
                    <th>State</th>
                    <th>Zip</th>
                    <th>Phone</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in Users)
                {
                    @if (item.FamilyId == familyId & item.FamilyId != null)
                    {
                        <tr>
                            <td>@item.Email</td>
                            <td>@item.FirstName</td>
                            <td>@item.LastName</td>
                            <td>@item.Address</td>
                            <td>@item.State</td>
                            <td>@item.Zip</td>
                            <td>@item.Phone</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <p>Wrong Family?</p>
        <button class="btn btn-primary" @onclick="(() => Update(userId))">Leave Current Family</button>
    }

}

@code {

    List<AspNetUsers> Users;
    List<Family> Familys;
    string userId;
    string firstName;
    string lastName;
    string address;
    string state;
    string zip;
    string phone;
    string familyId;
    AspNetUsers User;
    bool ShowPopup = false;
    IdentityUser objUser = new IdentityUser();

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        Users = await userService.GetAspNetUsersAsync();
        Familys = await familyService.GetFamilyAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = await _UserManager.GetUserAsync(user);
        userId = currentUser.Id;
        AspNetUsers aspUser = await userService.GetAspNetUsersByIdAsync(userId);
        familyId = aspUser.FamilyId;
        //await load();
    }

    protected async Task Update(string userId)
    {
        AspNetUsers removeFamily = await userService.GetAspNetUsersByIdAsync(userId);
        removeFamily.FamilyId = null;
        await userService.UpdateAspNetUsersAsync(userId, removeFamily);
        await load();
    }
}
