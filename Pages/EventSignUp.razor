@page "/EventSignUp"
@using CampTiger.Models
@using CampTiger.Data
@using Microsoft.AspNetCore.Identity

@attribute [Authorize(Roles = "normal")]

@inject IJSRuntime JsRuntime
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EventService  eventService
@inject UserEventService userEventService
@inject GroupService groupService
@inject UserGroupService userGroupService
<h1> Event Sign Up</h1>
<p>Choose your Events</p>

<style>
    #searchKey {
        background-position: 10px 10px;
        background-repeat: no-repeat;
        width: 100%;
        font-size: 17px;
        padding: 13px 20px 13px 40px;
        border: 1px solid #ddd;
        margin-bottom: 12px;
    }
</style>

<input type="text" id="searchKey" @onkeyup="@LookUp" placeholder="Search for events by name..." title="Type in a name">
<br />

@if (events == null)
{
    <p><em> Loading...</em></p>
}
else
{
    <table class="table table-hover" id="list">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Date</th>
                <th>Time</th>
                <th>Capacity</th>
                <th>Group</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groups)
            {
                @foreach (var record in records)
                {
                    @foreach (var sect in events)
                    {
                        @if (record.GroupId == group.GroupId & record.UserId == userId & sect.Group == group.GroupId)
                        {
                            <tr>
                                <td>@sect.Name</td>
                                <td>@sect.Description</td>
                                <td>@sect.Date</td>
                                <td>@sect.Time</td>
                                <td>@sect.Capacity</td>
                                <td>@group.Name</td>
                                <td>
                                    <button class="btn btn-primary" @onclick="(() => Insert(sect))">Sign-Up</button>
                                </td>
                            </tr>
                        }
                    }
                }
            }

        </tbody>
    </table>
}

@code {

    List<Event> events;
    List<Group> groups;
    List<UserGroups> records;
    string eventId;
    string userId;
    private enum MODE { None, Add };
    MODE mode = MODE.None;
    Group group;
    public Group current { get; set; } = new Group();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        events = await eventService.GetEventsAsync();
        groups = await groupService.GetGroupAsync();
        records = await userGroupService.GetUserGroupAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = await UserManager.GetUserAsync(user);
        userId = currentUser.Id;
    }

    protected async Task Insert(Event activity)
    {
        UserEvent g = new UserEvent()
        {
            EventId = activity.EventId,
            UserId = userId
        };
        
        if(await userEventService.GetUserEventByIdAsync(g.EventId, g.UserId)==null)
            await userEventService.InsertUserEventAsync(g);
        await load();
        mode = MODE.None;
    }

    async Task LookUp()
    {
        await JsRuntime.InvokeVoidAsync("mySearch");
    }
}
