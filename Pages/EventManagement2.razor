@page "/EventManagement2"
@using CampTiger.Models
@using CampTiger.Data

@attribute [Authorize(Roles = "admin")]

@inject IJSRuntime JsRuntime
@inject EventService eventService
@inject AspNetUsersService aspNetUsersService

<style>
    #searchKey {
        background-position: 10px 10px;
        background-repeat: no-repeat;
        width: 100%;
        font-size: 17px;
        padding: 13px 20px 13px 40px;
        border: 1px solid #ddd;
        margin-bottom: 12px;
    }
</style>

<h1> Events</h1>
<p>Read, Edit, and Delete Event records.</p>
<input type="text" id="searchKey" @onkeyup="@LookUp" placeholder="Search for events by name..." title="Type in a name">
<br />
@if (events == null)
{
    <p><em> Loading...</em></p>
}

else
{
    <table class='table table-hover' id="list">
        <thead>
            <tr>
                <th>Name</th>
                <th>Leader</th>
                <th>Description</th>
                <th>Date</th>
                <th>Time</th>
                <th>Capacity</th>
                <th>Group</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in events)
            {
                @foreach (var user in users)
                {
                    @if (user.Id == item.Leader)
                    {
                        <tr @onclick="@(() => Show(item.EventId))">
                            <td>@item.Name</td>
                            <td>@user.FirstName  @user.LastName</td>
                            <td>@item.Description</td>
                            <td>@item.Date</td>
                            <td>@item.Time</td>
                            <td>@item.Capacity</td>
                            <td>@item.Group</td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>

}

@if (events != null && mode == MODE.EditDelete) // Update & Delete form
{
    <label>EventName: </label>
    <br />
    <input plachehold="Name" @bind="@name" />
    <br />
    <label>Description: </label>
    <br />
    <input plachehold="Details" @bind="@description" />
    <br />
    <label>Location: </label>
    <br />
    <input plachehold="Date" @bind="@date" />
    <br />
    <label>Time: </label>
    <br />
    <input plachehold="Time" @bind="@time" />
    <br />
    <label>Capacity: </label>
    <br />
    <input plachehold="Details" @bind="@capacity" />
    <br />
    <input plachehold="Group ID" @bind="@Group" />
    <br />
    <button @onclick="@Update" class="btn btn-primary">Update</button>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
    <button @onclick="@Delete" class="btn btn-danger">Delete</button>
}

@functions{
    List<Event> events;
    List<AspNetUsers> users;
    string eventId;
    string leader;
    string Group;
    string name;
    string description;
    string date;
    string time;
    string capacity;
    private enum MODE { None, Add, EditDelete };
    MODE mode = MODE.None;
    Event activity;

    protected void ClearFields()
    {
        eventId = string.Empty;
        Group = string.Empty;
        name = string.Empty;
        description = string.Empty;
        date = string.Empty;
        time = string.Empty;
        capacity = string.Empty;
    }

    protected async Task Update()
    {
        Event ev = new Event()
        {
            Group = Group,
            Name = name,
            Description = description,
            Date = date,
            Time = time,
            Capacity = capacity
        };

        await eventService.UpdateEventAsynC(eventId, ev);
        ClearFields();
        await load();
        mode = MODE.None;
    }

    protected async Task Delete()
    {
        await eventService.DeleteEventAsync(eventId);
        ClearFields();
        await load();
        mode = MODE.None;
    }

    protected async Task Show(string id)
    {
        activity = await eventService.GetEventByIdAsync(id);
        eventId = activity.EventId;
        Group = activity.Group;
        leader = activity.Leader;
        name = activity.Name;
        description = activity.Description;
        date = activity.Date;
        time = activity.Time;
        capacity = activity.Capacity;
        mode = MODE.EditDelete;
    }

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        events = await eventService.GetEventsAsync();
        users = await aspNetUsersService.GetAspNetUsersAsync();
    }

    async Task LookUp()
    {
        await JsRuntime.InvokeVoidAsync("mySearch");
    }
}