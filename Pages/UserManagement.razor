@page "/UserManagement"
@using CampTiger.Models
@using CampTiger.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@attribute [Authorize(Roles = "admin")]

@inject IJSRuntime JsRuntime
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AspNetUsersService userService

    <style>
        #searchKey {
            background-position: 10px 10px;
            background-repeat: no-repeat;
            width: 100%;
            font-size: 17px;
            padding: 13px 20px 13px 40px;
            border: 1px solid #ddd;
            margin-bottom: 12px;
        }
    </style>

<h1> User Management </h1>
<p> Manage User data.</p>
<input type="text" id="searchKey" @onkeyup="@LookUp" placeholder="Search for Users by email..." title="Type in a name">
<br>
@if (Users == null)
{
    <p><em> Loading...</em></p>
}
else
{
    <button class="btn btn-success" @onclick="AddNewUser">Add User</button>
    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a user -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add User</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current user -->
                    <div class="modal-body">
                        <input class="form-control" type="text"
                               placeholder="Email"
                               @bind="objUser.Email" />
                        <input class="form-control" type="password"
                               placeholder="Password"
                               @bind="objUser.PasswordHash" />
                        <select class="form-control"
                                @bind="@CurrentUserRole">

                            @foreach (var option in Options)
                            {
                                <option value="@option">
                                    @option
                                </option>
                            }
                        </select>
                        <br /><br />
                        <!-- Button to save the user -->
                        <button class="btn btn-primary"
                                @onclick="SaveUser">
                            Save
                        </button>

                        <br />
                        <span style="color:red">@strError</span>
                    </div>
                </div>
            </div>
        </div>
    }

    <table class='table table-hover' id="list">
        <thead>
            <tr>
                <th>EMail</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Address</th>
                <th>State</th>
                <th>Zip</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Users)
            {
                <tr @onclick="@(() => Show(item.Id))">
                    <td>@item.Email</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.Address</td>
                    <td>@item.State</td>
                    <td>@item.Zip</td>
                    <td>@item.Phone</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Users != null && mode == MODE.EditDelete) // Update & Delete form
{
    <label> User ID: @userId</label>
    <br>
    <label> First Name:</label>
    <br>
    <input placeholder="First Name" @bind="@firstName" />
    <br />
    <label> Last Name:</label>
    <br>
    <input placeholder="Last Name" @bind="@lastName" />
    <br />
    <label> Address:</label>
    <br>
    <input placeholder="Address" @bind="@address" />
    <br />
    <label> State:</label>
    <br>
    <input placeholder="State" @bind="@state" />
    <br />
    <label> Zip:</label>
    <br>
    <input placeholder="Zip" @bind="@zip" />
    <br />
    <label> Phone:</label>
    <br>
    <input placeholder="Phone" @bind="@phone" />
    <br />
    <label> Permissions: </label>
    <br>
    <select class="form-control"
            @bind="@CurrentUserRole">

        @foreach (var option in Options)
        {
            <option value="@option">
                @option
            </option>
        }
    </select>
    <br />
    <button @onclick="@Update" class="btn btn-primary">Update</button>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
    <button @onclick="@Delete" class="btn btn-danger">Delete</button>
}


@code {

    List<AspNetUsers> Users;
    string userId;
    string permissions = "";
    string firstName;
    string lastName;
    string address;
    string state;
    string zip;
    string phone;
    private enum MODE { None, Add, EditDelete };
    MODE mode = MODE.None;
    AspNetUsers User;
    bool ShowPopup = false;
    IdentityUser objUser = new IdentityUser();

    string CurrentUserRole { get; set; } = "User";

    List<string> Options = new List<string>() { "User", "Group Leader", "Admin" };
    string strError = "";

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {

        Users = await userService.GetAspNetUsersAsync();
    }

    protected void ClearFields()
    {
        firstName = string.Empty;
        lastName = string.Empty;
        address = string.Empty;
        state = string.Empty;
        zip = string.Empty;
        phone = string.Empty;
    }

    protected async Task AddNewUser()
    {
        ShowPopup = true;
        objUser = new IdentityUser();

    }

    async Task SaveUser()

    {
        var NewUser = new IdentityUser
        {
            UserName = objUser.Email,
            Email = objUser.Email
        };

        if (!userService.AspNetUsersExistsEmail(NewUser.Email))
        {
            var CreateResult = await _UserManager.CreateAsync(NewUser, objUser.PasswordHash);

            await _UserManager.AddToRoleAsync(NewUser, CurrentUserRole);

            ShowPopup = false;
            Users = await userService.GetAspNetUsersAsync();
        }
    }

    protected async Task Update()
    {

        AspNetUsers u = new AspNetUsers()
        {
            FirstName = firstName,
            LastName = lastName,
            Address = address,
            State = state,
            Zip = zip,
            Phone = phone
        };

        await userService.UpdateAspNetUsersAsync(userId, u);
        var change = await _UserManager.FindByIdAsync(userId);

        // clears out all previous roles before adding in new one.
        await _UserManager.RemoveFromRoleAsync(change, "User");
        await _UserManager.RemoveFromRoleAsync(change, "Admin");
        await _UserManager.RemoveFromRoleAsync(change, "Group Leader");
        // add selected role for user account
        await _UserManager.AddToRoleAsync(change, CurrentUserRole);

        ClearFields();
        await load();
        mode = MODE.None;
    }

    protected async Task Delete()
    {
        await userService.DeleteAspNetUsersAsync(userId);
        ClearFields();
        await load();
        mode = MODE.None;
    }

    protected async Task Show(string id)
    {
        User = await userService.GetAspNetUsersByIdAsync(id);
        userId = User.Id;
        firstName = User.FirstName;
        lastName = User.LastName;
        address = User.Address;
        state = User.State;
        zip = User.Zip;
        phone = User.Phone;
        mode = MODE.EditDelete;
    }

    void ClosePopup()
    {
        ShowPopup = false;
    }

    async Task LookUp()
    {
        await JsRuntime.InvokeVoidAsync("mySearch");
    }
}

